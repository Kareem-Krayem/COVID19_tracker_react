{"version":3,"sources":["utils.js","Components/InfoBox/InfoBox.js","Components/Map/Map.js","Components/Table/Table.js","Components/LineGraph/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","InfoBox","isRed","active","title","total","props","Card","className","onClick","CardContent","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","caseType","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","res","json","catch","err","alert","fetchData","length","datasets","borderColor","backgroundColor","App","baseUrl","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","onCountryChange","event","countryCode","target","name","iso2","getCountriesData","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.51c0337f.chunk.js","sourcesContent":["import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => (a.cases > b.cases) ? -1 : 1)\n    return sortedData;\n}\n\nexport const showDataOnMap = (data, casesType = 'cases') => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div\n                        className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    />\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);\n\nexport const prettyPrintStat = (stat) =>\n    stat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\";","import React from 'react';\nimport './InfoBox.css';\nimport {\n    Card,\n    CardContent,\n    Typography\n} from '@material-ui/core';\n\nfunction InfoBox({ isRed, active, title, cases, total, ...props }) {\n    return (\n        <Card className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`} onClick={props.onClick}>\n            < CardContent >\n                <Typography\n                    color=\"textSecondary\"\n                    className=\"infoBox__title\"\n                >\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && 'info__cases__green'}`}>{cases}</h2>\n                <Typography\n                    color=\"textSecondary\"\n                    className=\"infoBox__total\"\n                >\n                    {total} Total\n                </Typography>\n            </ CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox;\n","import React from 'react';\nimport './Map.css';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from '../../utils';\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map;\n","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {\n                countries.map(({ country, cases }) => (\n                    <tr>\n                        <td>{country}</td>\n                        <td>\n                            <strong>{numeral(cases).format(\"0,0\")}</strong>\n                        </td>\n                    </tr>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\n\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n}\n\nfunction LineGraph({ casesType = 'cases', ...props }) {\n\n    const [data, setData] = useState({});\n\n    const buildChartData = (data, caseType) => {\n        let chartData = [];\n        let lastDataPoint;\n        for (let date in data.cases) {\n            if (lastDataPoint) {\n                let newDataPoint = {\n                    x: date,\n                    y: data[caseType][date] - lastDataPoint,\n                };\n                chartData.push(newDataPoint);\n            }\n            lastDataPoint = data[caseType][date];\n        };\n        return chartData;\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=120`)\n                .then((res) => res.json())\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                })\n                .catch((err) => alert(`Error: ${err}`))\n        }\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n                <Line\n                    data={{\n                        datasets: [{\n                            data: data,\n                            borderColor: \"#CC1034\",\n                            backgroundColor: \"rgba(204,16,52,0.9)\"\n                        }]\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { sortData, prettyPrintStat } from './utils';\n\nimport InfoBox from './Components/InfoBox/InfoBox';\nimport Map from './Components/Map/Map';\nimport Table from './Components/Table/Table';\nimport LineGraph from './Components/LineGraph/LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\n\nfunction App() {\n\n  const baseUrl = \"https://disease.sh/v3/covid-19\";\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode === 'worldwide'\n      ? `${baseUrl}/all`\n      : `${baseUrl}/countries/${countryCode}`;\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      })\n      .catch((err) => alert(`Error: ${err}`))\n  };\n\n  useEffect(() => {\n    fetch(`${baseUrl}/all`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      })\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(`${baseUrl}/countries`)\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n        .catch((err) => alert(`Error: ${err}`))\n    };\n    getCountriesData();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>\n                    {country.name}\n                  </MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            title=\"CoronaVirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n            onClick={e => setCasesType('cases')}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n            onClick={e => setCasesType('recovered')}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n            onClick={e => setCasesType('deaths')}\n          />\n        </div>\n        <Map\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n          casesType={casesType}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" url={baseUrl} casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}